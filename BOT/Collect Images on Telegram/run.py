# A program that collects images taken on your phone and saves them in folders determined by the class of the photo.
# For example, type 'people' in the chat, and the program will now collect images of people
import os
import sys
import sys
import logging
from PIL import Image, ImageStat
from telegram.ext import Updater, Filters, CommandHandler, MessageHandler

# Token
TOKEN = sys.argv[1]
# Class that is now being collected
class_type = 'people'
# Folder containing images send by the user
folder_img = '/data/'+class_type+'/'
# Root folder containing the program
root_folder = os.getcwd()

# Logging by docs.python.org
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

def new_typeClass(update, context):
    global class_type, folder_img, root_folder

    new_class = update.message.text.lower()
    class_valid = True
    # Check if the new class is valid (you can add more validations)
    if new_class:
        class_type = new_class
        folder_img = '/data/' + class_type + '/'
        os.makedirs(root_folder + folder_img, exist_ok=True)
        os.chdir(root_folder + folder_img)
        response = 'The class has been set to ' + class_type
    else:
        response = 'Invalid class'

    update.message.reply_text(response)
    
# Set up the bot
updater = Updater(token=TOKEN, use_context=True)
dispatcher = updater.dispatcher
dispatcher.add_handler(CommandHandler('newclass', new_typeClass))
# Start the bot
updater.start_polling()
updater.idle()

def send_text(update, context):
    global class_type, folder_img, root_folder

    class_valid = False
    message_text = update.message.text.lower()

    # Check if the sent message contains a class name
    if "class:" in message_text:
        class_name = message_text.split("class:")[1].strip()
        if class_name:
            class_type = class_name
            class_valid = True

    if class_valid:
        # Name of the folder where images of the class should be stored
        folder_img = '/data/' + class_type + '/'
        os.makedirs(root_folder + folder_img, exist_ok=True)
        os.chdir(root_folder + folder_img)
        response = 'You can now start sending images of ' + class_type + 'to save them'
    else:
        response = 'You need to specify a class using "class: [class_name]."'

    update.message.reply_text(response)

def send_image(update, context):
    global class_type, folder_img, root_folder
    
    indetifies = update.message.photo[-1].file_id
    # File content
    file = context.bot.get_file(indetifies)
    # Download file
    image_name = file.download()
    print('File Process ',folder_img+image_name)
    update.message.reply_text('Saved image of'+class_type)

# Bot Commands
def start(update, context):
    update.message.reply_text('Hello, write the name of class or people and object and then send images')
    
def help(update, context):
    update.message.reply_text('Hello, write the name of class or people and object and then send images')

def error(update, context):
    logger.warning('This "%s" resulted in the error "%s"', update, context.error)
    
def main():
    updater = Updater(TOKEN, use_context=True)
    print('Value = ',updater)
    if updater==None:
       print('Invalid TOKEN,  paste the token generated by BotFather!')
       exit(0)

dp = updater.dispatcher
print('Value of dp = ', dp)
# Starting /start and /help
dp.add_handler(CommandHandler("start", start))
dp.add_handler(CommandHandler("help", help))
# Define a função que vai tratar os textos
dp.add_handler(MessageHandler(Filters.text, send_text))
# Create a new folder for takens images 
os.makedirs(root_folder+folder_img, exist_ok=True)
os.chdir(root_folder+folder_img)
# Function Error
dp.add_handler(MessageHandler(Filters.photo, send_image))
dp.add_error_handler(error)
# Start Bot
updater.start_polling()
updater.idle()

if __name__ == '__main__':
    print('Bot is running, press CRTL+C to stop')
    main()